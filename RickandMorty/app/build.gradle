apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion AndroidConfig.compileSdk
    buildToolsVersion AndroidConfig.buildTools

    defaultConfig {
        applicationId AndroidConfig.applicationId
        minSdkVersion AndroidConfig.minSdk
        targetSdkVersion AndroidConfig.targetSdk
        versionCode AndroidConfig.versionCode
        versionName AndroidConfig.versionName
        testInstrumentationRunner AndroidConfig.testInstrumentationRunner

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'android/databinding/DataBinderMapper.java'
        exclude 'android/databinding/DataBindingComponent.java'
        exclude 'android/databinding/DynamicUtil.java'
    }

    kapt {
        correctErrorTypes = true
    }


    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        //Dedicated directories for tests written in Kotlin
        test.java.srcDirs += "src/test/kotlin"
        androidTest.java.srcDirs += "src/androidTest/kotlin"
    }

    afterEvaluate {
        android.sourceSets.all { sourceSet ->
            if (!sourceSet.name.startsWith('test') || !sourceSet.name.startsWith('androidTest')) {
                sourceSet.kotlin.setSrcDirs([])
            }
        }
    }

    buildTypes {

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            versionNameSuffix '-DEBUG'
        }
    }

    productFlavors {}

    packagingOptions {}

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation Dependencies.kotlin_stdlib_jdk8
    implementation Dependencies.kotlinKTX

    // Android X Dependencies.
    implementation Dependencies.androidx_appcompat
    implementation Dependencies.androidx_constraintlayout

    //Navigation
    implementation Dependencies.navigation_fragment
    implementation Dependencies.navigation_ui_ktx

    // Lifecycle components
    // ViewModel and LiveData
    implementation Dependencies.androidx_lifecycle
    annotationProcessor Dependencies.androidx_lifecycle_common_java8

    // Dagger Dependencies.
    kapt Dependencies.dagger_compiler
    kapt Dependencies.dagger_processor
    implementation Dependencies.dagger
    implementation Dependencies.dagger_android_support
    implementation Dependencies.dagger_android

    // Retrofit.
    implementation Dependencies.retrofit2

    // OkHttp
    implementation Dependencies.okhttp
    implementation Dependencies.okhttp_logging_interceptor

}
